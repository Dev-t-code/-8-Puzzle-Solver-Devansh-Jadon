{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMkniiRNxLf1Ug54OBmTQ5K",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dev-t-code/-8-Puzzle-Solver-Devansh-Jadon/blob/main/%208-Puzzle%20Solver\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "mXmFdf63hGQW"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "import heapq\n",
        "\n",
        "def manhattan_distance(state, goal):\n",
        "    distance = 0\n",
        "    for i in range(3):\n",
        "        for j in range(3):\n",
        "            if state[i][j] != 0:\n",
        "                x, y = divmod(goal.index(state[i][j]), 3)\n",
        "                distance += abs(x - i) + abs(y - j)\n",
        "    return distance\n",
        "\n",
        "class Node:\n",
        "    def __init__(self, state, parent, move, cost, heuristic):\n",
        "        self.state = state\n",
        "        self.parent = parent\n",
        "        self.move = move\n",
        "        self.cost = cost\n",
        "        self.heuristic = heuristic\n",
        "\n",
        "    def __lt__(self, other):\n",
        "        return (self.cost + self.heuristic) < (other.cost + other.heuristic)\n",
        "\n",
        "\n",
        "def get_blank_position(state):\n",
        "    for i in range(3):\n",
        "        for j in range(3):\n",
        "            if state[i][j] == 0:\n",
        "                return i, j\n",
        "\n",
        "\n",
        "def generate_moves(state):\n",
        "    x, y = get_blank_position(state)\n",
        "    moves = []\n",
        "    if x > 0: moves.append((-1, 0))  # Move Up\n",
        "    if x < 2: moves.append((1, 0))   # Move Down\n",
        "    if y > 0: moves.append((0, -1))  # Move Left\n",
        "    if y < 2: moves.append((0, 1))   # Move Right\n",
        "    return moves\n",
        "\n",
        "\n",
        "def apply_move(state, move):\n",
        "    x, y = get_blank_position(state)\n",
        "    new_state = [row[:] for row in state]\n",
        "    dx, dy = move\n",
        "    new_x, new_y = x + dx, y + dy\n",
        "    new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]\n",
        "    return new_state\n",
        "\n",
        "\n",
        "def a_star_search(initial_state, goal_state):\n",
        "    goal_flat = [item for sublist in goal_state for item in sublist]\n",
        "    initial_flat = [item for sublist in initial_state for item in sublist]\n",
        "\n",
        "    priority_queue = []\n",
        "    heapq.heappush(priority_queue, Node(initial_state, None, None, 0, manhattan_distance(initial_state, goal_flat)))\n",
        "\n",
        "    visited = set()\n",
        "\n",
        "    while priority_queue:\n",
        "        current_node = heapq.heappop(priority_queue)\n",
        "        current_flat = [item for sublist in current_node.state for item in sublist]\n",
        "\n",
        "        if current_flat == goal_flat:\n",
        "            return current_node\n",
        "\n",
        "        visited.add(tuple(current_flat))\n",
        "\n",
        "        for move in generate_moves(current_node.state):\n",
        "            new_state = apply_move(current_node.state, move)\n",
        "            new_flat = [item for sublist in new_state for item in sublist]\n",
        "\n",
        "            if tuple(new_flat) not in visited:\n",
        "                heapq.heappush(priority_queue, Node(new_state, current_node, move, current_node.cost+1, manhattan_distance(new_state, goal_flat)))\n",
        "\n",
        "    return None\n",
        "\n",
        "\n",
        "def print_solution(node):\n",
        "    path = []\n",
        "    while node:\n",
        "        path.append(node.state)\n",
        "        node = node.parent\n",
        "    path.reverse()\n",
        "\n",
        "    for step in path:\n",
        "        for row in step:\n",
        "            print(row)\n",
        "        print(\"\\n\")\n",
        "\n",
        "\n",
        "# Get user input\n",
        "print(\"Enter initial state (use 0 for blank):\")\n",
        "initial_state = []\n",
        "for i in range(3):\n",
        "    initial_state.append(list(map(int, input().split())))\n",
        "\n",
        "print(\"Enter goal state:\")\n",
        "goal_state = []\n",
        "for i in range(3):\n",
        "    goal_state.append(list(map(int, input().split())))\n",
        "\n",
        "# Solve the puzzle\n",
        "solution = a_star_search(initial_state, goal_state)\n",
        "\n",
        "if solution:\n",
        "    print(\"Solution found!\")\n",
        "    print_solution(solution)\n",
        "else:\n",
        "    print(\"No solution exists.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2KkgoEvTtCjc",
        "outputId": "3769c3b5-f58d-4b23-cb7d-5b275c3a98b4"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter initial state (use 0 for blank):\n",
            "2 8 3\n",
            "1 6 4\n",
            "7 0 5\n",
            "Enter goal state:\n",
            "1 2 3\n",
            "8 0 4\n",
            "7 6 5\n",
            "Solution found!\n",
            "[2, 8, 3]\n",
            "[1, 6, 4]\n",
            "[7, 0, 5]\n",
            "\n",
            "\n",
            "[2, 8, 3]\n",
            "[1, 0, 4]\n",
            "[7, 6, 5]\n",
            "\n",
            "\n",
            "[2, 0, 3]\n",
            "[1, 8, 4]\n",
            "[7, 6, 5]\n",
            "\n",
            "\n",
            "[0, 2, 3]\n",
            "[1, 8, 4]\n",
            "[7, 6, 5]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "[0, 8, 4]\n",
            "[7, 6, 5]\n",
            "\n",
            "\n",
            "[1, 2, 3]\n",
            "[8, 0, 4]\n",
            "[7, 6, 5]\n",
            "\n",
            "\n"
          ]
        }
      ]
    }
  ]
}